<program> ::= <whitespace>? (<library> <terminal>)? <whitespace>? (<imports> <terminal>)? <whitespace>? <declarations>? <whitespace>?

<library> ::= "library" <whitespace> <identifier>

<imports> ::= <import>
			| <import> <nonterminal_whitespace>? <terminal> <whitespace>? <imports>

<import> ::= "using" <whitespace> <identifier>
            | "using" <whitespace> <identifierlist> <whitespace> "from" <whitespace> <identifier> ( "." <identifier> )*

<identifierlist> ::= <identifier> 
                   | <identifier> <whitespace>? "," <whitespace>? <identifierlist>

<declarations> ::= <declaration>
				 | <declaration> <whitespace>? <declarations>

<declaration> ::= <type_decl>
                | <function_decl>
			    | <variable_decl>
			    | <statement>

<type_decl> ::= "def" <whitespace> <type> <whitespace>? "{" <whitespace>? <type_parameters> <whitespace>? "}" <nonterminal_whitespace>* <terminal>

<type_parameters> ::= <parameter>
				  | <parameter> <whitespace>? <terminal> (<whitespace>? <type_parameters>)?

<function_decl> ::= <type> <whitespace> <function_identifier> <whitespace>? "(" <whitespace>? <parameters>? <whitespace>? ")" <whitespace>? <block>

<function_identifier> ::= <identifier> (<whitespace>? "!")?

<variable_decl> ::= <variable_qualifier> <whitespace> <type> <reference>? <whitespace> <identifier> (<whitespace>? "=" <whitespace>? <expression> <nonterminal_whitespace>*)? <terminal>

<variable_qualifier> ::= "mutable"

<type> ::= (<value_type> | <function_type>) ("[" (<whitespace>? <number>* <whitespace>?)? "]" )?
		 
<value_type> ::= ( <basic_type> | <user_defined_type>)

<reference> ::= <whitespace> "ref"
		 
<user_defined_type> ::= <identifier>
		 
<function_type> ::= "(" <whitespace>? <type_list> <whitespace>? ")" <whitespace>? <left_arrow> <whitespace>? ( <value_type> | "(" <whitespace>? <type> <whitespace>? ")" )

<type_list> ::= <type> | <type> <whitespace>? "," <whitespace>? <type_list>
<left_arrow> ::= "->"
		 
<basic_type> ::= "bool"
			  | "byte"
			  | "short"
			  | "int"
			  | "long"
			  | "ubyte"
			  | "ushort"
			  | "uint"
			  | "ulong"
			  | "char"
			  | "float"
			  | "double"
		 
<parameters> ::= <parameter>
               | <parameter> <whitespace>? "," (<whitespace>? <parameters>)?
			   
<parameter> ::= <type> <reference>? <whitespace> <identifier>

<arguments> ::= <expression> | <expression> <whitespace>? "," <whitespace>? <arguments>

<statement> ::= <expressionStatement>
              | <forStatement>
			  | <ifStatement>
			  | <returnStatement>
			  | <whileStatement>
			  | <block>

<expressionStatement> ::= <expression> <nonterminal_whitespace>* <terminal>

<forStatement> ::= "for" <whitespace>? "(" <whitespace>? (<variable_decl> | <expression>)? <whitespace>? <terminal> <whitespace>? <expression>? <whitespace>? <terminal> <whitespace>? <expression>? <whitespace>? ")" <whitespace>? <statement>

<ifStatement> ::= "if" <whitespace>? "(" <whitespace>? <expression> <whitespace>? ")" <whitespace>? <statement> <whitespace>? ("else" <whitespace> <statement>)?

<returnStatement> ::= "return" <whitespace> <expression>? <nonterminal_whitespace>* <terminal>

<whileStatement> ::= "while" <whitespace>? "(" <whitespace>? <expression> <whitespace>? ")" <whitespace>? <statement>

<block> ::= "{" <whitespace>? <declarations>? <whitespace>? "}" <nonterminal_whitespace>*

<expression> ::= <assignment>

<assignment> ::=  <logic_or> | ( <call> <whitespace>? "." <whitespace>?)* <whitespace>? <identifier> <whitespace>? "=" <whitespace>? (<assignment> | <logic_or>)

<logic_or> ::= <logic_and> <whitespace>? ("||" <whitespace>? <logic_or> <whitespace>?)?

<logic_and> ::= <equality> <whitespace>? ("&&" <whitespace>? <logic_and> <whitespace>?)?

<equality> ::= <comparison> <whitespace>? (( "!=" | "==" ) <whitespace>? <equality> <whitespace>?)?

<comparison> ::= <term> <whitespace>? ((">" | ">=" | "<" | "<=" ) <whitespace>? <comparison> <whitespace>?)?

<term> ::= <factor> <nonterminal_whitespace>? ( ( "-" | "+" ) <whitespace>? <term> <whitespace>?)?

<factor> ::= <unary> (( "/" | "*" ) <whitespace>? <factor> <whitespace>?)?

<unary> ::= ( "!" <whitespace>? | "-" <whitespace>? ) <unary> | <call>

<call> ::= <primary> <whitespace>? ("(" <whitespace>? <arguments>? <whitespace>? ")" | "." <whitespace>? <identifier> <whitespace>? | "[" <whitespace>? <expression> <whitespace>? "]")*

<primary> ::= <identifier> | <literal>

<identifier> ::= (<letter> | "_") (<alphanumeric>)*

<alphanumeric> ::= <letter> | <number>

<letter> ::= ([a-z] | [A-Z])

<number> ::= [0-9]

<terminal> ::= (";")

<literal> ::= <bool_literal>
			| <int_literal>
			| <float_literal>
			| <double_literal>
			| <char_literal>
			| <string_literal>
			| "(" <whitespace>? <expression> <whitespace>? ")"
			
<bool_literal> ::= "true" | "false"

<int_literal> ::= <number>+

<double_literal> ::= <number>* "." <number>+

<float_literal> ::= <double_literal> "f"

<char_literal> ::= "'" <chars> "'"

<string_literal> ::= "\"" <chars>* "\""

<chars> ::= <letter> | <number> | <whitespace_chars> | "\\" ( <letter> | <number>+ | "\"" | "\\" ) | "\n" | "!" | ","

<whitespace> ::= <whitespace_chars>+

<whitespace_chars> ::= ( <nonterminal_whitespace> | "\n" )

<nonterminal_whitespace> ::= " "